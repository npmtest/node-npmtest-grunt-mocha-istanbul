{"/home/travis/build/npmtest/node-npmtest-grunt-mocha-istanbul/test.js":"/* istanbul instrument in package npmtest_grunt_mocha_istanbul */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-mocha-istanbul/lib.npmtest_grunt_mocha_istanbul.js":"/* istanbul instrument in package npmtest_grunt_mocha_istanbul */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_mocha_istanbul = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_mocha_istanbul = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-mocha-istanbul/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-mocha-istanbul && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_mocha_istanbul */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_mocha_istanbul\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_mocha_istanbul.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_mocha_istanbul.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_mocha_istanbul.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_mocha_istanbul.__dirname + '/lib.npmtest_grunt_mocha_istanbul.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-mocha-istanbul/node_modules/grunt-mocha-istanbul/tasks/index.js":"module.exports = function (grunt) {\n    'use strict';\n\n    var path = require('path');\n\n    function getMochaPath() {\n        try {\n            return require.resolve('mocha/bin/_mocha');\n        } catch (ignored) {\n            grunt.fail.fatal('Mocha peer dependency missing.  Please \"npm install mocha\"');\n        }\n    }\n\n    function getIstanbulPath() {\n        try {\n            return require.resolve('istanbul/lib/cli');\n        } catch (ignored) {\n            grunt.fail.fatal('Istanbul peer dependency missing.  Please \"npm install istanbul\"');\n        }\n    }\n\n    function arrayOfStrings(options, name, exec) {\n        if (Array.isArray(options)) {\n            if (options.length) {\n                exec(options);\n            } else {\n                grunt.verbose.ok('Skipping empty ' + name + ' array')\n            }\n        } else {\n            grunt.fail.fatal(name + ' must be an array of strings');\n        }\n    }\n\n    function defaultOptions() {\n        return {\n            require: [],\n            ui: false,\n            globals: [],\n            reporter: false,\n            timeout: false,\n            coverage: false,\n            slow: false,\n            includes: false,\n            grep: false,\n            dryRun: false,\n            quiet: false,\n            recursive: false,\n            mask: false,\n            root: false,\n            print: false,\n            noColors: false,\n            harmony: false,\n            coverageFolder: 'coverage',\n            cwd: process.cwd(),\n            reportFormats: ['lcov'],\n            check: {\n                statements: false,\n                lines: false,\n                functions: false,\n                branches: false\n            },\n            excludes: false,\n            mochaOptions: false,\n            istanbulOptions: false,\n            nodeOptions: false,\n            nodeExec: process.execPath\n        };\n    }\n\n    function executeCheck(callback, coverageFolder, options) {\n        var args = [], check = options.check;\n\n        if (\n            check.statements !== false ||\n            check.lines !== false ||\n            check.functions !== false ||\n            check.branches !== false\n            ) {\n            args.push(options.scriptPath);\n            args.push('check-coverage');\n            if (check.lines) {\n                args.push('--lines');\n                args.push(check.lines);\n            }\n            if (check.statements) {\n                args.push('--statements');\n                args.push(check.statements);\n            }\n            if (check.functions) {\n                args.push('--functions');\n                args.push(check.functions);\n            }\n            if (check.branches) {\n                args.push('--branches');\n                args.push(check.branches);\n            }\n\n            args.push(coverageFolder + '/coverage*.json');\n\n            grunt.verbose.ok('Will execute: ', options.nodeExec + ' ' + args.join(' '));\n\n            if (!options.dryRun) {\n                grunt.util.spawn({\n                    cmd: options.nodeExec,\n                    args: args,\n                    opts: {\n                        env: process.env,\n                        cwd: options.cwd,\n                        stdio: options.quiet ? 'ignore' : 'inherit'\n                    }\n                }, function (err) {\n                    if (err) {\n                        callback && callback(err);\n                        return;\n                    }\n                    callback && callback(null, 'Done. Minimum coverage threshold succeeded.');\n                });\n\n                return;\n            } else {\n                callback && callback(null, 'Would also execute post cover: ' + options.nodeExec + ' ' + args.join(' '));\n                return;\n            }\n        }\n\n        callback && callback();\n    }\n\n    grunt.registerMultiTask('istanbul_check_coverage', 'Solo task for checking coverage over different or many files.', function () {\n        var done = this.async();\n        var options = this.options(defaultOptions());\n\n        // only execute this function if no scriptPath is specified\n        if (!options.scriptPath) {\n            options.scriptPath = getIstanbulPath();\n        }\n\n        executeCheck(function (err, result) {\n            if (err) { return done(err); }\n            if (options.coverage) {\n                var coverage = grunt.file.read(path.join(options.coverageFolder, 'lcov.info'));\n                return grunt.event.emit('coverage', coverage, function (d) {\n                    grunt.log.ok(result || 'Done. Check coverage folder.');\n                    done(d);\n                });\n            }\n            grunt.log.ok(result || 'Done. Check coverage folder.');\n            done();\n        }, options.coverageFolder, options);\n    });\n\n    grunt.registerMultiTask('mocha_istanbul', 'Generate coverage report with Istanbul from mocha test', function () {\n        if (!this.filesSrc.length) {\n            grunt.log.error('No test files to run');\n            return;\n        }\n\n        var mochaPath = getMochaPath();\n        var options = this.options(defaultOptions());\n        var testsDir = grunt.file.isDir(this.filesSrc[0]) ? this.filesSrc[0] : path.dirname(this.filesSrc[0]);\n        var coverageFolder = path.join(options.cwd, options.coverageFolder);\n        var rootFolderForCoverage = options.root ? path.join(options.cwd, options.root) : '.';\n        var done = this.async();\n        var args = [];\n\n        if (options.nodeOptions) {\n            arrayOfStrings(options.nodeOptions, 'options.nodeOptions', function(options){\n                options.forEach(function(nodeOption){\n                    args.push(nodeOption);\n                });\n            })\n        }\n\n        if (!options.scriptPath) {\n            options.scriptPath = getIstanbulPath();\n        }\n\n        if (options.harmony) {\n            args.push('--harmony');\n        }\n\n        args.push(options.scriptPath);        // ie. node ./node_modules/istanbul/lib/cli.js or another script name\n        args.push('cover');                   // node <scriptPath> cover\n\n\n        if (options.excludes) {\n            arrayOfStrings(options.excludes, 'options.excludes', function(options){\n                options.forEach(function (excluded) {\n                    args.push('-x');\n                    args.push(excluded);\n                });\n            })\n        }\n\n        if (options.includes) {\n            arrayOfStrings(options.includes, 'options.includes', function(options){\n                options.forEach(function (included) {\n                    args.push('-i');\n                    args.push(included);\n                });\n            })\n        }\n\n        args.push('--dir', coverageFolder); // node ./node_modules/istanbul/cli.js --dir=coverage\n\n        if (options.root) {\n            args.push('--root', rootFolderForCoverage);\n        }\n        if (options.print) {\n            args.push('--print', options.print);\n        }\n\n        options.reportFormats.forEach(function (format) {\n            args.push('--report', format);\n        });\n\n        if (options.istanbulOptions) {\n            arrayOfStrings(options.istanbulOptions, 'options.istanbulOptions', function(options){\n                options.forEach(function (opt) {\n                    args.push(opt);\n                });\n            })\n        }\n\n        args.push(mochaPath);                 // node ./node_modules/istanbul/lib/cli.js cover ./node_modules/mocha/bin/_mocha\n        args.push('--');                      // node ./node_modules/istanbul/lib/cli.js cover ./node_modules/mocha/bin/_mocha --\n\n        if (grunt.file.exists(options.cwd, testsDir, 'mocha.opts')) {\n            if (\n                options.require.length ||\n                options.globals.length ||\n                options.ui ||\n                options.reporter ||\n                options.timeout ||\n                options.slow ||\n                options.grep ||\n                options.mask ||\n                options.noColors\n                ) {\n                grunt.log.warn('Warning: mocha.opts exists, but overwriting with options');\n            }\n        }\n\n        if (options.timeout) {\n            args.push('--timeout');\n            args.push(options.timeout);\n        }\n\n        if (options.require) {\n            arrayOfStrings(options.require, 'options.require', function(options){\n                options.forEach(function (require) {\n                    grunt.file.expand({nonull: true}, require).forEach(function(expanded){\n                        args.push('--require');\n                        args.push(expanded);\n                    })\n                });\n            });\n        }\n\n        if (options.ui) {\n            args.push('--ui');\n            args.push(options.ui);\n        }\n\n        if (options.noColors) {\n            args.push('--no-colors');\n        }\n\n        if (options.reporter) {\n            args.push('--reporter');\n            args.push(options.reporter);\n        }\n\n        if (options.globals) {\n            arrayOfStrings(options.globals, 'options.globals', function(options){\n                args.push('--globals');\n                args.push(options.join(','));\n            });\n        }\n\n        if (options.slow) {\n            args.push('--slow');\n            args.push(options.slow);\n        }\n        if (options.grep) {\n            args.push('--grep');\n            args.push(options.grep);\n        }\n\n        if (options.recursive) {\n            args.push('--recursive');\n        }\n\n        var masked = this.filesSrc;\n\n        if (options.mask) {\n            masked = masked.map(function (file) {\n                return path.join(grunt.file.isDir(file) ? file : path.dirname(file), options.mask);\n            });\n        }\n\n        if (options.mochaOptions) {\n            arrayOfStrings(options.mochaOptions, 'options.mochaOptions', function(options){\n                options.forEach(function (opt) {\n                    args.push(opt);\n                });\n            })\n        }\n\n        args = args.concat(masked);\n\n        grunt.verbose.ok('Will execute:', options.nodeExec + ' ' + args.join(' '));\n\n        if (!options.dryRun) {\n            grunt.util.spawn({\n                cmd: options.nodeExec,\n                args: args,\n                opts: {\n                    env: process.env,\n                    cwd: options.cwd,\n                    stdio: options.quiet ? 'ignore' : 'inherit'\n                }\n            }, function (err, result) {\n                if (err) {\n                    grunt.log.error(result);\n                    done(false);\n                    return;\n                }\n\n                executeCheck(function (err, result) {\n                    if (!err) {\n                        if (options.coverage) {\n                            var coverage = grunt.file.read(path.join(coverageFolder, 'lcov.info'));\n                            grunt.event.emit('coverage', coverage, function (d) {\n                                grunt.log.ok(result || 'Done. Check coverage folder.');\n                                done(d);\n                            });\n                        } else {\n                            grunt.log.ok(result || 'Done. Check coverage folder.');\n                            done();\n                        }\n                    } else {\n                        done(err);\n                    }\n                }, coverageFolder, options);\n            });\n        } else {\n            executeCheck(function (err, would) {\n                grunt.log.ok('Would execute:', options.nodeExec + ' ' + args.join(' '));\n                would && grunt.log.ok(would);\n            }, coverageFolder, options);\n\n            done();\n        }\n\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-mocha-istanbul/node_modules/grunt-mocha-istanbul/Gruntfile.js":"module.exports = function (grunt) {\n    var nodeExec = require.resolve('.bin/babel-node' + (process.platform === 'win32' ? '.cmd' : ''));\n\n    grunt.initConfig({\n        mocha_istanbul: {\n            target: {\n                src: 'test/*.test.js',\n                options: {\n                    //coverageFolder: 'lcov',\n                    coverage: true,\n                    noColors: true,\n                    dryRun: false,\n                    //root: './test',\n                    //root: './tasks',\n                    //print: 'detail',\n                    check: {\n                        lines: 1\n                    },\n                    require: ['test/*1.js'],\n                    excludes: ['test/excluded*.js', '**/other.js'],\n                    mochaOptions: ['--bail', '--debug-brk'],\n                    reporter: 'spec',\n                    reportFormats: ['html','lcovonly']\n                }\n            },\n            babel: {\n                src: 'test/*.es6.js',\n                options: {\n                    nodeExec: nodeExec,\n                    reportFormats: ['html'],\n                    istanbulOptions: ['--verbose'],\n                    root: 'es6',\n                    mochaOptions: ['--compilers', 'js:babel-register']\n                }\n            },\n            isparta: {\n                src: 'test/*.es5.js',\n                options: {\n                    nodeExec: nodeExec,\n                    reportFormats: ['html'],\n                    istanbulOptions: ['--verbose'],\n                    root: 'es6',\n                    scriptPath: require.resolve('isparta/lib/cli')\n                }\n            }\n        }\n    });\n\n    grunt.event.on('coverage', function (content, done) {\n        console.log(content.slice(0, 15) + '...');\n        done();\n    });\n\n    require('./tasks')(grunt);\n\n    grunt.registerTask('default', ['mocha_istanbul']);\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-mocha-istanbul/node_modules/grunt-mocha-istanbul/es6/file.es6.js":"'use strict';\n\nexport function exec() {\n    return new Promise((r) => r(true));\n}","/home/travis/build/npmtest/node-npmtest-grunt-mocha-istanbul/node_modules/grunt-mocha-istanbul/lib/src/other.js":"var some = require('./some');\n\nmodule.exports = function(a) { return some(3, a); };\n","/home/travis/build/npmtest/node-npmtest-grunt-mocha-istanbul/node_modules/grunt-mocha-istanbul/lib/src/some.js":"module.exports = function (a,b) { return a + b; };\n"}